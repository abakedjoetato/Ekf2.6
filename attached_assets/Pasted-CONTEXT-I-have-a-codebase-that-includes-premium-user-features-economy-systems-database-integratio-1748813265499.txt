CONTEXT: I have a codebase that includes premium user features, economy systems, database integrations, and multiple commands that need to work together seamlessly. Over time, development has led to potential fragmentation where different components may be storing or accessing data inconsistently.

TASK: Perform a comprehensive codebase audit to identify and document all inconsistencies, fragmentation issues, and integration problems across the entire system, THEN develop a detailed implementation plan to fix all identified issues.

AUDIT REQUIREMENTS:

DATA CONSISTENCY ANALYSIS:
- Map all database collections, tables, and storage locations
- Identify where premium status is checked, stored, and validated
- Document all economy-related data (currency, transactions, balances) and their storage patterns
- Find any duplicate or conflicting data storage approaches
- Flag instances where components expect data in different formats or locations

PREMIUM SYSTEM AUDIT:
- Verify all premium checks use the same validation logic
- Ensure premium status is stored and accessed consistently across all features
- Identify any premium features that bypass standard validation
- Check for premium data scattered across multiple collections/tables

ECONOMY SYSTEM REVIEW:
- Document all currency types, transaction methods, and balance tracking
- Verify economy operations use consistent data sources
- Identify any economy features that store data in non-standard locations
- Check for potential economy exploits or inconsistent validation

COMMAND INTEROPERABILITY ANALYSIS:
- Test that commands sharing data access the same sources
- Verify commands that modify user data update all relevant locations
- Identify commands that may conflict with each other
- Check for commands using outdated or alternative data access patterns

DATABASE INTEGRATION ASSESSMENT:
- Map all database connections and access patterns
- Identify redundant or conflicting database operations
- Document any hard-coded references that should be dynamic
- Flag potential race conditions or data sync issues

IMPLEMENTATION PLAN REQUIREMENTS:
After the audit, develop a comprehensive fix plan that includes:

MIGRATION STRATEGY:
- Data migration scripts to consolidate fragmented data
- Step-by-step process to move data between collections/tables safely
- Backup and rollback procedures for each migration step
- Timeline estimates for each migration phase

CODE REFACTORING PLAN:
- Prioritized list of code changes needed (critical to minor)
- New standardized functions/classes to create for consistency
- Deprecated code that needs to be removed or updated
- Integration points that need to be redesigned

TESTING STRATEGY:
- Unit tests needed to verify fixes work correctly
- Integration tests to ensure systems work together
- User acceptance criteria for each fixed component
- Performance impact assessment of proposed changes

DEPLOYMENT STRATEGY:
- Phase-by-phase rollout plan to minimize downtime
- Feature flags or gradual rollouts for risky changes
- Monitoring and alerting setup for post-deployment
- Rollback procedures if issues arise

RISK MITIGATION:
- Identify potential breaking changes and their solutions
- User communication plan for any service interruptions
- Data integrity verification procedures
- Emergency procedures if critical issues arise during implementation

OUTPUT FORMAT:
Provide findings and plan in these sections:
1. Executive Summary (critical issues + recommended approach)
2. Current State Analysis (data flow maps, inconsistency details)
3. Issues Inventory (categorized by severity and system)
4. TARGET STATE DESIGN (how systems should work together)
5. DETAILED FIX PLAN with:
   - Phase 1: Critical fixes (data integrity, security)
   - Phase 2: Major inconsistencies (system integration)
   - Phase 3: Minor improvements (code cleanup, optimization)
6. IMPLEMENTATION TIMELINE with milestones
7. RESOURCE REQUIREMENTS (time, potential downtime, testing needs)
8. SUCCESS METRICS (how to measure if fixes worked)

For each issue and its fix:
- Current problem description with code locations
- Root cause analysis
- Proposed solution with code examples
- Implementation steps
- Testing requirements
- Potential risks and mitigation
- Dependencies and order of operations
- Time estimate

DELIVERABLE: A complete roadmap that can be followed step-by-step to transform the fragmented codebase into a cohesive, consistent system with all components properly integrated and using standardized data patterns.
```

This enhanced prompt ensures you get both the comprehensive audit AND a practical, actionable plan to systematically fix everything that's found.